#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const readline = require('readline');

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –ª–µ–≥–∫–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É —Ä–µ–∂–∏–º–∞–º–∏ –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
 */

const ENV_FILE = '.env';
const ENV_EXAMPLE_FILE = '.env.example';

/**
 * –ß—Ç–µ–Ω–∏–µ .env —Ñ–∞–π–ª–∞
 */
function readEnvFile() {
    if (!fs.existsSync(ENV_FILE)) {
        console.log('‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return null;
    }
    
    const content = fs.readFileSync(ENV_FILE, 'utf8');
    const env = {};
    
    content.split('\n').forEach(line => {
        const trimmed = line.trim();
        if (trimmed && !trimmed.startsWith('#')) {
            const [key, ...valueParts] = trimmed.split('=');
            if (key && valueParts.length > 0) {
                env[key.trim()] = valueParts.join('=').trim();
            }
        }
    });
    
    return env;
}

/**
 * –ó–∞–ø–∏—Å—å .env —Ñ–∞–π–ª–∞
 */
function writeEnvFile(env) {
    const lines = [
        '# –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏',
        `IS_DEBUG=${env.IS_DEBUG || 'true'}`,
        '',
        '# URL –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)',
        `DEBUG_URL=${env.DEBUG_URL || 'https://localhost:7000/api'}`,
        '',
        '# URL –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞',
        `REAL_URL=${env.REAL_URL || 'https://api.production.com/api'}`,
        '',
        '# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
        `CHUNK_SIZE=${env.CHUNK_SIZE || '4194304'}`,
        `REQUEST_TIMEOUT=${env.REQUEST_TIMEOUT || '30000'}`,
        `MAX_RETRIES=${env.MAX_RETRIES || '3'}`,
        '',
        '# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ',
        `COMPANY_ID=${env.COMPANY_ID || '3fa85f64-5717-4562-b3fc-2c963f66afa6'}`,
        `SESSION_ID=${env.SESSION_ID || '3fa85f64-5717-4562-b3fc-2c963f66afa6'}`
    ];
    
    fs.writeFileSync(ENV_FILE, lines.join('\n'));
    console.log(`‚úÖ –§–∞–π–ª ${ENV_FILE} –æ–±–Ω–æ–≤–ª–µ–Ω`);
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
 */
function showConfig() {
    const env = readEnvFile();
    if (!env) return;
    
    console.log('‚öôÔ∏è  –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:');
    console.log('========================');
    console.log(`üîß –†–µ–∂–∏–º: ${env.IS_DEBUG === 'true' ? 'üü¢ DEBUG' : 'üî¥ PRODUCTION'}`);
    console.log(`üåê Debug URL: ${env.DEBUG_URL}`);
    console.log(`üåê Real URL: ${env.REAL_URL}`);
    console.log(`üì¶ Chunk Size: ${formatBytes(parseInt(env.CHUNK_SIZE))}`);
    console.log(`‚è±Ô∏è  Timeout: ${env.REQUEST_TIMEOUT}ms`);
    console.log(`üîÑ Max Retries: ${env.MAX_RETRIES}`);
    console.log(`üè¢ Company ID: ${env.COMPANY_ID}`);
    console.log(`üÜî Session ID: ${env.SESSION_ID}`);
}

/**
 * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º DEBUG/PRODUCTION
 */
function toggleMode() {
    const env = readEnvFile();
    if (!env) return;
    
    const isCurrentlyDebug = env.IS_DEBUG === 'true';
    env.IS_DEBUG = isCurrentlyDebug ? 'false' : 'true';
    
    writeEnvFile(env);
    
    console.log(`üîÑ –†–µ–∂–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞: ${env.IS_DEBUG === 'true' ? 'üü¢ DEBUG' : 'üî¥ PRODUCTION'}`);
}

/**
 * –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
 */
async function interactiveSetup() {
    const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
    });
    
    const question = (prompt) => new Promise(resolve => rl.question(prompt, resolve));
    
    console.log('üõ†Ô∏è  –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    console.log('================================================');
    
    const env = readEnvFile() || {};
    
    try {
        // –†–µ–∂–∏–º
        const mode = await question(`üîß –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏? (${env.IS_DEBUG || 'true'}) [true/false]: `);
        if (mode.trim()) env.IS_DEBUG = mode.trim();
        
        // Debug URL
        const debugUrl = await question(`üåê Debug URL? (${env.DEBUG_URL || 'https://localhost:7000/api'}): `);
        if (debugUrl.trim()) env.DEBUG_URL = debugUrl.trim();
        
        // Real URL
        const realUrl = await question(`üåê Production URL? (${env.REAL_URL || 'https://api.production.com/api'}): `);
        if (realUrl.trim()) env.REAL_URL = realUrl.trim();
        
        // Chunk Size
        const chunkSize = await question(`üì¶ –†–∞–∑–º–µ—Ä —á–∞—Å—Ç–∏ (–±–∞–π—Ç—ã)? (${env.CHUNK_SIZE || '4194304'}): `);
        if (chunkSize.trim()) env.CHUNK_SIZE = chunkSize.trim();
        
        // Timeout
        const timeout = await question(`‚è±Ô∏è  –¢–∞–π–º–∞—É—Ç (–º—Å)? (${env.REQUEST_TIMEOUT || '30000'}): `);
        if (timeout.trim()) env.REQUEST_TIMEOUT = timeout.trim();
        
        // Max Retries
        const retries = await question(`üîÑ –ú–∞–∫—Å. –ø–æ–≤—Ç–æ—Ä–æ–≤? (${env.MAX_RETRIES || '3'}): `);
        if (retries.trim()) env.MAX_RETRIES = retries.trim();
        
        // Company ID
        const companyId = await question(`üè¢ Company ID? (${env.COMPANY_ID || '3fa85f64-5717-4562-b3fc-2c963f66afa6'}): `);
        if (companyId.trim()) env.COMPANY_ID = companyId.trim();
        
        // Session ID
        const sessionId = await question(`üÜî Session ID? (${env.SESSION_ID || '3fa85f64-5717-4562-b3fc-2c963f66afa6'}): `);
        if (sessionId.trim()) env.SESSION_ID = sessionId.trim();
        
        writeEnvFile(env);
        console.log('\n‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    } finally {
        rl.close();
    }
}

/**
 * –°–æ–∑–¥–∞—Ç—å .env —Ñ–∞–π–ª –∏–∑ –ø—Ä–∏–º–µ—Ä–∞
 */
function createFromExample() {
    if (!fs.existsSync(ENV_EXAMPLE_FILE)) {
        console.log(`‚ùå –§–∞–π–ª ${ENV_EXAMPLE_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return;
    }
    
    if (fs.existsSync(ENV_FILE)) {
        console.log(`‚ö†Ô∏è  –§–∞–π–ª ${ENV_FILE} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        return;
    }
    
    fs.copyFileSync(ENV_EXAMPLE_FILE, ENV_FILE);
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω ${ENV_FILE} –∏–∑ ${ENV_EXAMPLE_FILE}`);
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 */
function validateConfig() {
    const env = readEnvFile();
    if (!env) return;
    
    const errors = [];
    
    if (!env.DEBUG_URL) errors.push('DEBUG_URL –Ω–µ –∑–∞–¥–∞–Ω');
    if (!env.REAL_URL) errors.push('REAL_URL –Ω–µ –∑–∞–¥–∞–Ω');
    
    const chunkSize = parseInt(env.CHUNK_SIZE);
    if (isNaN(chunkSize) || chunkSize < 1024 * 1024) {
        errors.push('CHUNK_SIZE –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º >= 1MB');
    }
    
    const timeout = parseInt(env.REQUEST_TIMEOUT);
    if (isNaN(timeout) || timeout < 1000) {
        errors.push('REQUEST_TIMEOUT –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º >= 1000ms');
    }
    
    const retries = parseInt(env.MAX_RETRIES);
    if (isNaN(retries) || retries < 1 || retries > 10) {
        errors.push('MAX_RETRIES –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 10');
    }
    
    if (errors.length === 0) {
        console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞');
    } else {
        console.log('‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:');
        errors.forEach(error => console.log(`   - ${error}`));
    }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –≤ –±–∞–π—Ç–∞—Ö
 */
function formatBytes(bytes) {
    const sizes = ['B', 'KB', 'MB', 'GB'];
    if (bytes === 0) return '0 B';
    const i = Math.floor(Math.log(bytes) / Math.log(1024));
    return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å
 */
function showHelp() {
    console.log('üõ†Ô∏è  Environment Manager - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π');
    console.log('================================================');
    console.log('');
    console.log('–ö–æ–º–∞–Ω–¥—ã:');
    console.log('  show         –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é');
    console.log('  toggle       –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º DEBUG/PRODUCTION');
    console.log('  setup        –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞');
    console.log('  create       –°–æ–∑–¥–∞—Ç—å .env –∏–∑ .env.example');
    console.log('  validate     –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é');
    console.log('  help         –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É');
    console.log('');
    console.log('–ü—Ä–∏–º–µ—Ä—ã:');
    console.log('  npm run env show');
    console.log('  npm run env toggle');
    console.log('  npm run env setup');
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
    const command = process.argv[2];
    
    switch (command) {
        case 'show':
            showConfig();
            break;
        case 'toggle':
            toggleMode();
            break;
        case 'setup':
            await interactiveSetup();
            break;
        case 'create':
            createFromExample();
            break;
        case 'validate':
            validateConfig();
            break;
        case 'help':
        default:
            showHelp();
            break;
    }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
    main().catch(error => {
        console.error('–û—à–∏–±–∫–∞:', error.message);
        process.exit(1);
    });
}

module.exports = {
    readEnvFile,
    writeEnvFile,
    showConfig,
    toggleMode,
    validateConfig
};