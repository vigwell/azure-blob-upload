#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üé¨ Azure Blob Chunked Upload - Setup');
console.log('====================================');

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —Å–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
 */
function checkTestFiles() {
    const videoFile = './sample_video.webm';
    const audioFile = './sample_audio.webm';
    
    let needsFiles = false;
    
    if (!fs.existsSync(videoFile)) {
        console.log(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω: ${videoFile}`);
        needsFiles = true;
    } else {
        const stats = fs.statSync(videoFile);
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω: ${videoFile} (${formatFileSize(stats.size)})`);
    }
    
    if (!fs.existsSync(audioFile)) {
        console.log(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω: ${audioFile}`);
        needsFiles = true;
    } else {
        const stats = fs.statSync(audioFile);
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω: ${audioFile} (${formatFileSize(stats.size)})`);
    }
    
    if (needsFiles) {
        console.log('\nüí° –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã:');
        console.log('1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞');
        console.log('2. –°–∫–∞—á–∞–π—Ç–µ —Å https://sample-videos.com/');
        console.log('3. –°–æ–∑–¥–∞–π—Ç–µ —Å –ø–æ–º–æ—â—å—é FFmpeg:');
        console.log('   ffmpeg -f lavfi -i testsrc=duration=10:size=640x480:rate=30 -c:v libvpx sample_video.webm');
        console.log('   ffmpeg -f lavfi -i sine=frequency=440:duration=15 -c:a libopus sample_audio.webm');
        return false;
    }
    
    return true;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
 */
function checkDependencies() {
    console.log('\nüì¶ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...');
    
    try {
        require('axios');
        console.log('‚úÖ axios —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    } catch (e) {
        console.log('‚ùå axios –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        return false;
    }
    
    return true;
}

/**
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
 */
function installDependencies() {
    console.log('\nüì• –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...');
    
    try {
        execSync('npm install', { stdio: 'inherit' });
        console.log('‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:', error.message);
        return false;
    }
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
 */
async function testApiConnection() {
    console.log('\nüîó –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API...');
    
    try {
        const axios = require('axios');
        const https = require('https');
        
        const response = await axios.post(
            'https://localhost:7000/api/Video/sas',
            {
                companyIdFromUserToken: '3fa85f64-5717-4562-b3fc-2c963f66afa6',
                sessionId: '3fa85f64-5717-4562-b3fc-2c963f66afa6',
                streamId: 'test-setup'
            },
            {
                headers: {
                    'accept': '*/*',
                    'Content-Type': 'application/json'
                },
                httpsAgent: new https.Agent({
                    rejectUnauthorized: false
                }),
                timeout: 5000
            }
        );
        
        if (response.data.success) {
            console.log('‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω');
            console.log(`üìÅ –ü—Ä–µ—Ñ–∏–∫—Å: ${response.data.payload.blobPrefix}`);
            return true;
        } else {
            console.log('‚ö†Ô∏è  API –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ –≤–µ—Ä–Ω—É–ª success: false');
            return false;
        }
        
    } catch (error) {
        console.log('‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
        
        if (error.code === 'ECONNREFUSED') {
            console.log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ https://localhost:7000');
        } else if (error.code === 'ENOTFOUND') {
            console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL API –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
        }
        
        return false;
    }
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
 */
function showReadiness() {
    console.log('\nüöÄ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∑–∞–ø—É—Å–∫—É:');
    console.log('========================');
    
    const hasFiles = checkTestFiles();
    const hasDeps = checkDependencies();
    
    if (hasFiles && hasDeps) {
        console.log('‚úÖ –í—Å–µ –≥–æ—Ç–æ–≤–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞!');
        console.log('\nüéØ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞:');
        console.log('   npm start        # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫');
        console.log('   node upload.js   # –ü—Ä—è–º–æ–π –∑–∞–ø—É—Å–∫');
        console.log('   npm run upload   # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∑–∞–ø—É—Å–∫');
        return true;
    } else {
        console.log('‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞');
        return false;
    }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
 */
function createDummyFile(fileName, sizeKB = 100) {
    console.log(`üìù –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É ${fileName} (${sizeKB}KB)...`);
    
    try {
        const buffer = Buffer.alloc(sizeKB * 1024, 0);
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ WebM (–æ—á–µ–Ω—å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
        const header = Buffer.from([0x1A, 0x45, 0xDF, 0xA3]); // EBML header
        header.copy(buffer, 0);
        
        fs.writeFileSync(fileName, buffer);
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω ${fileName}`);
        return true;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ${fileName}:`, error.message);
        return false;
    }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
 */
function formatFileSize(bytes) {
    const sizes = ['B', 'KB', 'MB', 'GB'];
    if (bytes === 0) return '0 B';
    const i = Math.floor(Math.log(bytes) / Math.log(1024));
    return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
 */
async function main() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (!checkDependencies()) {
        if (!installDependencies()) {
            process.exit(1);
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    if (!checkTestFiles()) {
        console.log('\n‚ùì –°–æ–∑–¥–∞—Ç—å –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤? (y/n)');
        
        const readline = require('readline');
        const rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });
        
        rl.question('> ', (answer) => {
            if (answer.toLowerCase() === 'y' || answer.toLowerCase() === 'yes') {
                createDummyFile('./sample_video.webm', 500); // 500KB
                createDummyFile('./sample_audio.webm', 100); // 100KB
                console.log('\n‚ö†Ô∏è  –°–æ–∑–¥–∞–Ω—ã –∑–∞–≥–ª—É—à–∫–∏! –ó–∞–º–µ–Ω–∏—Ç–µ –∏—Ö –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–µ .webm —Ñ–∞–π–ª—ã');
            }
            
            rl.close();
            continueSetup();
        });
    } else {
        continueSetup();
    }
}

async function continueSetup() {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º API (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    console.log('\n‚ùì –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API? (y/n)');
    
    const readline = require('readline');
    const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
    });
    
    rl.question('> ', async (answer) => {
        if (answer.toLowerCase() === 'y' || answer.toLowerCase() === 'yes') {
            await testApiConnection();
        }
        
        rl.close();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
        showReadiness();
        
        console.log('\nüèÅ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
if (require.main === module) {
    main().catch(error => {
        console.error('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', error);
        process.exit(1);
    });
}

module.exports = {
    checkTestFiles,
    checkDependencies,
    testApiConnection,
    formatFileSize
};