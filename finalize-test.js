#!/usr/bin/env node

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('dotenv').config();
const axios = require('axios');

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API /Video/finalize
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ FFmpeg
 */

const CONFIG = {
    IS_DEBUG: process.env.IS_DEBUG === 'true',
    DEBUG_URL: process.env.DEBUG_URL || 'https://localhost:7000/api',
    REAL_URL: process.env.REAL_URL || 'https://api.production.com/api',
    REQUEST_TIMEOUT: parseInt(process.env.REQUEST_TIMEOUT) || 30000,
    OVERLAY_TEXT: process.env.OVERLAY_TEXT || 'Test Processing'
};

CONFIG.API_BASE_URL = CONFIG.IS_DEBUG ? CONFIG.DEBUG_URL : CONFIG.REAL_URL;

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç API finalize
 */
async function testFinalize() {
    console.log('üß™ –¢–µ—Å—Ç API /Video/finalize');
    console.log('============================');
    console.log(`üåê URL: ${CONFIG.API_BASE_URL}/Video/finalize`);
    console.log(`üîß –†–µ–∂–∏–º: ${CONFIG.IS_DEBUG ? 'DEBUG' : 'PRODUCTION'}`);
    
    // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const testData = {
        streamId: 'test-stream-' + Date.now(),
        blobPrefix: 'test-prefix/20240917123456',
        outputFileName: 'test-output.mp4',
        overlayText: CONFIG.OVERLAY_TEXT
    };
    
    console.log('\nüì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å:');
    console.log(JSON.stringify(testData, null, 2));
    
    const axiosConfig = {
        headers: {
            'accept': '*/*',
            'Content-Type': 'application/json'
        },
        timeout: CONFIG.REQUEST_TIMEOUT
    };

    // –î–ª—è debug —Ä–µ–∂–∏–º–∞ –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    if (CONFIG.IS_DEBUG) {
        axiosConfig.httpsAgent = new (require('https')).Agent({
            rejectUnauthorized: false
        });
    }

    try {
        const response = await axios.post(
            `${CONFIG.API_BASE_URL}/Video/finalize`,
            testData,
            axiosConfig
        );

        console.log('\n‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç!');
        console.log(`üìä –°—Ç–∞—Ç—É—Å: ${response.status}`);
        console.log(`üìÑ –î–∞–Ω–Ω—ã–µ:`, JSON.stringify(response.data, null, 2));
        
        console.log('\nüéâ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω! API finalize —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
        
    } catch (error) {
        console.error('\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:');
        console.error(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${error.message}`);
        
        if (error.response) {
            console.error(`   –°—Ç–∞—Ç—É—Å: ${error.response.status}`);
            console.error(`   –î–∞–Ω–Ω—ã–µ: ${JSON.stringify(error.response.data, null, 2)}`);
        }
        
        if (error.code === 'ECONNREFUSED') {
            console.error('\nüí° API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –æ–Ω –∑–∞–ø—É—â–µ–Ω.');
            console.error(`   URL: ${CONFIG.API_BASE_URL}`);
        } else if (error.code === 'ENOTFOUND') {
            console.error('\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL API –≤ .env —Ñ–∞–π–ª–µ');
        }
        
        process.exit(1);
    }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å
 */
function showHelp() {
    console.log('üß™ –¢–µ—Å—Ç API /Video/finalize');
    console.log('============================');
    console.log('');
    console.log('–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç endpoint –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ.');
    console.log('');
    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
    console.log('  node finalize-test.js        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞');
    console.log('  node finalize-test.js help   # –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É');
    console.log('');
    console.log('–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (.env):');
    console.log('  IS_DEBUG=true               # –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏');
    console.log('  DEBUG_URL=https://localhost:7000/api');
    console.log('  OVERLAY_TEXT=Test Text      # –¢–µ–∫—Å—Ç –¥–ª—è –Ω–∞–ª–æ–∂–µ–Ω–∏—è');
    console.log('');
    console.log('–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:');
    console.log('  POST /api/Video/finalize');
    console.log('  {');
    console.log('    "streamId": "test-stream-123",');
    console.log('    "blobPrefix": "test-prefix/20240917123456",');
    console.log('    "outputFileName": "test-output.mp4",');
    console.log('    "overlayText": "Test Processing"');
    console.log('  }');
}

// –ó–∞–ø—É—Å–∫
async function main() {
    const command = process.argv[2];
    
    if (command === 'help' || command === '--help' || command === '-h') {
        showHelp();
        return;
    }
    
    await testFinalize();
}

if (require.main === module) {
    main().catch(error => {
        console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
        process.exit(1);
    });
}

module.exports = { testFinalize };